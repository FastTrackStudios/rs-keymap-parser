// Cargo.toml
// [dependencies]
// num_enum = "0.5"

use num_enum::{IntoPrimitive, TryFromPrimitive};
use serde::{Deserialize, Serialize};
use std::convert::TryFrom;

/// All Win32 virtual‐key codes, with simpler names (no `VK_`).
#[derive(
    Serialize, Deserialize, Debug, Clone, Copy, PartialEq, Eq, IntoPrimitive, TryFromPrimitive,
)]
#[repr(u16)]
pub enum KeyCode {
    LButton = 0x01,
    RButton = 0x02,
    Cancel = 0x03,
    MButton = 0x04,
    XButton1 = 0x05,
    XButton2 = 0x06,
    Backspace = 0x08,
    Tab = 0x09,
    Clear = 0x0C,
    Enter = 0x0D,
    Shift = 0x10,
    Control = 0x11,
    Alt = 0x12,
    Pause = 0x13,
    CapsLock = 0x14,
    Kana = 0x15,
    ImeOn = 0x16,
    Junja = 0x17,
    Final = 0x18,
    Hanja = 0x19,
    ImeOff = 0x1A,
    Escape = 0x1B,
    Convert = 0x1C,
    NonConvert = 0x1D,
    Accept = 0x1E,
    ModeChange = 0x1F,
    Space = 0x20,
    PageUp = 0x21,
    PageDown = 0x22,
    End = 0x23,
    Home = 0x24,
    Left = 0x25,
    Up = 0x26,
    Right = 0x27,
    Down = 0x28,
    Select = 0x29,
    Print = 0x2A,
    Execute = 0x2B,
    Snapshot = 0x2C,
    Insert = 0x2D,
    Delete = 0x2E,
    Help = 0x2F,
    Key0 = 0x30,
    Key1 = 0x31,
    Key2 = 0x32,
    Key3 = 0x33,
    Key4 = 0x34,
    Key5 = 0x35,
    Key6 = 0x36,
    Key7 = 0x37,
    Key8 = 0x38,
    Key9 = 0x39,
    A = 0x41,
    B = 0x42,
    C = 0x43,
    D = 0x44,
    E = 0x45,
    F = 0x46,
    G = 0x47,
    H = 0x48,
    I = 0x49,
    J = 0x4A,
    K = 0x4B,
    L = 0x4C,
    M = 0x4D,
    N = 0x4E,
    O = 0x4F,
    P = 0x50,
    Q = 0x51,
    R = 0x52,
    S = 0x53,
    T = 0x54,
    U = 0x55,
    V = 0x56,
    W = 0x57,
    X = 0x58,
    Y = 0x59,
    Z = 0x5A,
    LSuper = 0x5B, // was VK_LWIN
    RSuper = 0x5C, // was VK_RWIN
    Apps = 0x5D,
    Sleep = 0x5F,
    Numpad0 = 0x60,
    Numpad1 = 0x61,
    Numpad2 = 0x62,
    Numpad3 = 0x63,
    Numpad4 = 0x64,
    Numpad5 = 0x65,
    Numpad6 = 0x66,
    Numpad7 = 0x67,
    Numpad8 = 0x68,
    Numpad9 = 0x69,
    Multiply = 0x6A,
    Add = 0x6B,
    Separator = 0x6C,
    Subtract = 0x6D,
    Decimal = 0x6E,
    Divide = 0x6F,
    F1 = 0x70,
    F2 = 0x71,
    F3 = 0x72,
    F4 = 0x73,
    F5 = 0x74,
    F6 = 0x75,
    F7 = 0x76,
    F8 = 0x77,
    F9 = 0x78,
    F10 = 0x79,
    F11 = 0x7A,
    F12 = 0x7B,
    F13 = 0x7C,
    F14 = 0x7D,
    F15 = 0x7E,
    F16 = 0x7F,
    F17 = 0x80,
    F18 = 0x81,
    F19 = 0x82,
    F20 = 0x83,
    F21 = 0x84,
    F22 = 0x85,
    F23 = 0x86,
    F24 = 0x87,
    NumLock = 0x90,
    ScrollLock = 0x91,
    LShift = 0xA0,
    RShift = 0xA1,
    LControl = 0xA2,
    RControl = 0xA3,
    LAlt = 0xA4,
    RAlt = 0xA5,
    BrowserBack = 0xA6,
    BrowserForward = 0xA7,
    BrowserRefresh = 0xA8,
    BrowserStop = 0xA9,
    BrowserSearch = 0xAA,
    BrowserFavorites = 0xAB,
    BrowserHome = 0xAC,
    VolumeMute = 0xAD,
    VolumeDown = 0xAE,
    VolumeUp = 0xAF,
    MediaNextTrack = 0xB0,
    MediaPrevTrack = 0xB1,
    MediaStop = 0xB2,
    MediaPlayPause = 0xB3,
    LaunchMail = 0xB4,
    LaunchMediaSelect = 0xB5,
    LaunchApp1 = 0xB6,
    LaunchApp2 = 0xB7,
    OEM1 = 0xBA,
    OEMPlus = 0xBB,
    OEMComma = 0xBC,
    OEMMinus = 0xBD,
    OEMPeriod = 0xBE,
    OEM2 = 0xBF,
    OEM3 = 0xC0,
    OEM4 = 0xDB,
    OEM5 = 0xDC,
    OEM6 = 0xDD,
    OEM7 = 0xDE,
    OEM8 = 0xDF,
    OEM102 = 0xE2,
    ProcessKey = 0xE5,
    Packet = 0xE7,
    Attn = 0xF6,
    CrSel = 0xF7,
    ExSel = 0xF8,
    EREOF = 0xF9,
    Play = 0xFA,
    Zoom = 0xFB,
    NoName = 0xFC,
    PA1 = 0xFD,
    ClearKey = 0xFE,
}

impl KeyCode {
    /// Get the raw numeric value.
    pub fn as_u8(self) -> u8 {
        self as u8
    }

    /// Try to convert from a raw u16 value (with validation).
    pub fn from_u16(value: u16) -> Option<Self> {
        if value <= 255 {
            Self::from_u8(value as u8)
        } else {
            None
        }
    }

    /// Try to convert from a raw u8 value.
    pub fn from_u8(value: u8) -> Option<Self> {
        Self::try_from(value as u16).ok()
    }

    /// Get human-readable display name for comments
    pub fn display_name(self) -> &'static str {
        use KeyCode::*;
        match self {
            Backspace => "Backspace",
            Tab => "Tab",
            Enter => "Enter",
            Shift => "Shift",
            Control => "Control",
            Alt => "Alt",
            Pause => "Pause",
            CapsLock => "CapsLock",
            Escape => "Escape",
            Space => "Space",
            PageUp => "PageUp",
            PageDown => "PageDown",
            End => "End",
            Home => "Home",
            Left => "Left",
            Up => "Up",
            Right => "Right",
            Down => "Down",
            Insert => "Insert",
            Delete => "Delete",
            Key0 => "0",
            Key1 => "1",
            Key2 => "2",
            Key3 => "3",
            Key4 => "4",
            Key5 => "5",
            Key6 => "6",
            Key7 => "7",
            Key8 => "8",
            Key9 => "9",
            A => "A",
            B => "B",
            C => "C",
            D => "D",
            E => "E",
            F => "F",
            G => "G",
            H => "H",
            I => "I",
            J => "J",
            K => "K",
            L => "L",
            M => "M",
            N => "N",
            O => "O",
            P => "P",
            Q => "Q",
            R => "R",
            S => "S",
            T => "T",
            U => "U",
            V => "V",
            W => "W",
            X => "X",
            Y => "Y",
            Z => "Z",
            Numpad0 => "Numpad0",
            Numpad1 => "Numpad1",
            Numpad2 => "Numpad2",
            Numpad3 => "Numpad3",
            Numpad4 => "Numpad4",
            Numpad5 => "Numpad5",
            Numpad6 => "Numpad6",
            Numpad7 => "Numpad7",
            Numpad8 => "Numpad8",
            Numpad9 => "Numpad9",
            F1 => "F1",
            F2 => "F2",
            F3 => "F3",
            F4 => "F4",
            F5 => "F5",
            F6 => "F6",
            F7 => "F7",
            F8 => "F8",
            F9 => "F9",
            F10 => "F10",
            F11 => "F11",
            F12 => "F12",
            OEM1 => ";",
            OEMPlus => "=",
            OEMComma => ",",
            OEMMinus => "-",
            OEMPeriod => ".",
            OEM2 => "/",
            OEM3 => "`",
            OEM4 => "[",
            OEM5 => "\\",
            OEM6 => "]",
            OEM7 => "'",
            _ => "Unknown",
        }
    }
}

#[cfg(test)]
mod tests {
    use crate::keycodes::KeyCode;
    #[test]
    fn test_w() {
        let w = KeyCode::W.as_u8();
        println!("{}", w);
        assert_eq!(w, 87);
    }

    #[test]
    fn test_u8_to_keycode() {
        KeyCode::from_u16(87);
        assert_eq!(KeyCode::W.as_u8(), 87);
    }
}
